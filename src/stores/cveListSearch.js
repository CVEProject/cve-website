import { defineStore } from 'pinia';
import axios from 'axios';

export const useCveListSearchStore = defineStore('cveListSearch ', {
  state: () => { 
    return {
      cveId: '',
      from: 0,
      isArecord: undefined,
      isIdOrRecordFound: true,
      isPublished: false,
      isReserved: false,
      isRejected: false,
      isSearching: false,
      isLookingUpRecord: false,
      isQueryingSearchService: false,
      isLookUpRecordServerError: false,
      isSearchServerError: false,
      query: '',
      recordData: {},
      searchResults: [],
      serverError: false,
      showHelpText: false,
      size: 25,
      sortBy: {
        field: 'cveId',
        direction: 'desc',
      },
      totalExecutingRequests: -1,
      totalSearchResultCount: 0,
      pagination: {
        startWindow: 1,
        endWindow: 1,
        currentPage: 1,
        currentPageWindow: [],
        totalPages: undefined,
        maxPageWindow: 10,
        numberPerPage: 25,
      },
    }
  },
  actions: {
    decrement(field) {
      this[field] -= 1;
    },
    isCveIdPattern() {
      return new RegExp(/^CVE-\d{4}-\d{4,7}$/, 'i').test(this.query);
    },
    async search() {
      this.isSearching = true;
      try{

        console.log('search() >> about to call getSearchResults()')
        // * 2nd, query search service
        this.totalExecutingRequests = 1;
        await this.getSearchResults();
        console.log('search() >> just called getSearchResults()')

        // * Check if keyword is CVE ID
        if (this.isCveIdPattern()) {
          this.totalExecutingRequests = 2;
          
          // 1st, lookup ID to get Record data, and continue to get CVE Records that mention that ID
          this.cveId = this.query.toUpperCase();
          console.log('search() >> about to call getRecordData()')
          await this.getRecordData();
          console.log('search() >> just called getRecordData()')
        }

      } catch (error) {
         throw new Error('search() >> error with getRecordData() and or getSearchResults()');
      } finally {
        this.isSearching = false;
        this.setUpSearchResults();
      }
    },
    async getRecordData() {
      this.isLookingUpRecord = true;
      const getRecordUrl = `/api/cve/${this.cveId}`;
      console.log('getRecordData >> getRecordUrl: ', getRecordUrl);

      try {
        axios.defaults.baseURL = `https://${import.meta.env.VITE_CVE_SERVICES_BASE_URL}`;
        const response = await axios.get(getRecordUrl);
        const cveRecordData = response?.data || {};
        console.log('getRecordData >> typeof response: ', typeof response);
        console.log('getRecordData >> cveRecordData', cveRecordData);
        this.isArecord = true;
        this.isIdOrRecordFound = false;

        // format description
        let descriptions = [];
        cveRecordData.containers?.cna?.descriptions.forEach((description) => {
          if (description.lang === "en") descriptions.push(description.value);
        });
        let recordDataSummary = {
          cveId: cveRecordData?.cveMetadata?.cveId || 'No ID provided',
          cna: cveRecordData?.cveMetadata?.assignerShortName || 'No CNA provided',
          descriptions: descriptions,
          relevancyScore: 'not appliciable'
        }
        this.recordData = recordDataSummary;
        console.log('getRecordData >>  this.recordData = recordDataSummary ', recordDataSummary)

        if (cveRecordData?.cveMetadata.state === 'PUBLISHED') {
          this.isPublished = true;
        } else if (cveRecordData?.cveMetadata.state === 'REJECTED') {
          this.isRejected = true;
        }

      } catch (e) {
        console.log(`getRecordData >> Catch error: ${e}`);
        this.isLookUpRecordServerError = true;

        this.isPublished = false;
        this.isReserved = false;
        this.isRejected = false;
        this.isIdOrRecordFound = false;
        this.isArecord = false;
        throw new Error('getRecordData >> throwing wrroe')
      } finally {
        this.isLookingUpRecord = false;
        this.decrement('totalExecutingRequests');
        console.log(`getRecordData >> finally`);
      }
    },
    async getSearchResults() { 
      this.isQueryingSearchService = true;

      const instance = axios.create({
        baseURL: import.meta.env.VITE_API_BASE_URL,
      });

      try {
        let payLoad = this.createSearchPayload();
        const response = await instance.post(
          import.meta.env.VITE_LIST_SEARCH_PATH,
          payLoad
        );

        console.log('getSearchResults >> Search service response:', response);

        if (response.status === 200) {
          this.totalSearchResultCount = response.data.resultsTotal;
          console.log('getSearchResults >>> axios request competed successfully, totalSearchResultCount: ', this.totalSearchResultCount)
          this.processSearchResults(response.data.data);
        }

      } catch (e) {
        this.isSearchServerError = true;
        console.log('getSearchResults >> catch error : ', e);
        throw new Error(`getSearchResults >> : ${e}`)
      } finally {
        this.isQueryingSearchService = false;
        this.decrement('totalExecutingRequests');
        console.log(`getSearchResults >> finally`)
      }
    },
    processSearchResults(results){
      const parsedResults = [];

      if (results.length >> 0) {
        results.forEach((result) => {
          const descriptions = [];
          console.log(result._id)

          if (result?._source?.cveMetadata?.state === "PUBLISHED") {
            result?._source?.containers?.cna?.descriptions.forEach((description) => {
              if (description.lang === "en") descriptions.push(description.value);
            });
          } else if (result?._source?.cveMetadata?.state === "REJECTED") {
            result?._source?.containers?.cna?.rejectedReasons.forEach((rejectedReason) => {
              if (rejectedReason.lang === "en") descriptions.push(rejectedReason.value);
            });
          } else {
            descriptions.push('No description provided');
          }

          parsedResults.push({
            cveId: result._id,
            cna: result?._source?.cveMetadata?.assignerShortName || 'No CNA provided',
            descriptions: descriptions,
            relevancyScore: result?._score
          });
        });
      }

      this.searchResults = parsedResults;
    },
    setUpSearchResults() {
      if (!this.isLookUpRecordServerError && this.totalSearchResultCount > 0) {
        this.setupPagination();
      } else {
        console.log( `setup server errors and no results`)
      }
    },
    setupPagination() {
      console.log('pagination >> setupPagination before ', this.pagination)

      this.pagination.totalPages = Math.floor(this.totalSearchResultCount / this.pagination.numberPerPage);
      if (this.pagination.totalPages >= this.pagination.maxPageWindow) {
        this.pagination.endWindow = this.pagination.maxPageWindow;
      } else if((this.pagination.totalPages > 0) && (this.pagination.totalPages < this.pagination.maxPageWindow)) {
        this.pagination.endWindow = this.pagination.totalPages;
      } 

      this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow, 1);

      console.log('pagination >> setupPagination after', this.pagination)
    },
    paginate() {
      // search service starts at 0 while this app starts at 1
      this.from = (this.pagination.currentPage * this.pagination.numberPerPage) - this.pagination.numberPerPage;
      this.size = this.pagination.numberPerPage;
      console.log(`paginate() >> ${this.from}, ${this.size}`);
      console.log(this.pagination);

      this.search();
    },
    calcRange(start, stop, step) {
      let newArr = Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);
      return newArr
    },
    createSearchPayload() {
      console.log(this)
      let payLoad = {
        "query": this.query,
        "from": this.from,
        "size": this.size
      }

      let sort = [];
      if (this.sortBy.field === 'relevancy' && this.sortBy.direction === 'asc') {
        sort.push({
          "property": "relevancy",
          "order": "asc"
        });
      }

      if (this.sortBy.field === 'cveId' && this.sortBy.direction === 'asc') {
        sort.push({
          "property": "cveId ",
          "order": "asc"
        });
      }

      if (this.sortBy.field === 'cveId' && this.sortBy.direction === 'desc') {
        sort.push({
          "property": "cveId",
          "order": "desc"
        });
      }

      if (sort.length > 0) {
        payLoad.sort = sort;
      }

      console.log(`payload >>`)
      console.log(payLoad)
      return payLoad;
    },
    sortResults() {
      console.log(`sortResults() >> `)
      this.search();
    }
  }
});