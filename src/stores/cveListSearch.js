import { defineStore } from 'pinia';
import { useGenericGlobalsStore } from './genericGlobals';
import axios from 'axios';

export const useCveListSearchStore = defineStore('cveListSearch ', {
  state: () => { 
    return {
      cveId: '',
      from: 0,
      isArecord: undefined,
      isSeachButtonDisabled: true,
      isIdOrRecordFound: true,
      isPublished: false,
      isReserved: false,
      isRejected: false,
      isSearching: false,
      isLookingUpRecord: false,
      isQueryingSearchService: false,
      isLookUpRecordServerError: false,
      isSearchServerError: false,
      query: '',
      recordData: {},
      searchResults: [],
      serverError: false,
      showHelpText: false,
      size: 25,
      totalExecutingRequests: -1,
      totalSearchResultCount: 0,
      pagination: {
        startWindow: 1,
        endWindow: undefined,
        firstPage: 1,
        currentPage: 1,
        currentPageWindow: [],
        totalPages: undefined,
        maxPageWindow: 5,
        numberPerPage: 25,
        sortBy: {
          field: 'cveId',
          direction: 'desc',
          label: 'CVE ID (new to old)',
          selected: true
        },
        sortByOptions: [
          {
            field: 'cveId',
            direction: 'desc',
            label: 'CVE ID (new to old)',
            selected: true
          },
          {
            field: 'cveId',
            direction: 'asc',
            label: 'CVE ID (old to new)',
            selected: false
          },
          {
            field: 'relevancy',
            direction: 'desc',
            label: 'Relevancy (most to least)',
            selected: false
          },
          {
            field: 'relevancy',
            direction: 'asc',
            label: 'Relevancy (least to most)',
            selected: false
          }
        ],
        numberPerPageOptions: [25, 50, 100, 200],
        fromCount: undefined,
        toCount: undefined
      },
    }
  },
  actions: {
    decrement(field) {
      this[field] -= 1;
    },
    isCveIdPattern() {
      return new RegExp(/^CVE-\d{4}-\d{4,7}$/, 'i').test(this.query);
    },
    async search() {
      this.isSearching = true;
      try{

        // * 2nd, query search service
        this.totalExecutingRequests = 1;
        await this.getSearchResults();

        // * Check if keyword is CVE ID
        if (this.isCveIdPattern()) {
          this.totalExecutingRequests = 2;
          
          // 1st, lookup ID to get Record data, and continue to get CVE Records that mention that ID
          this.cveId = this.query.toUpperCase();
          await this.getRecordData();
        }

      } catch (error) {
         throw new Error('search() >> error with getRecordData() and or getSearchResults()');
      } finally {
        this.isSearching = false;
        this.setUpInitialPagination();
      }
    },
    async getRecordData() {
      this.isLookingUpRecord = true;
      const getRecordUrl = `/api/cve/${this.cveId}`;

      try {
        axios.defaults.baseURL = useCveListSearchStore().currentServicesUrl;
        const response = await axios.get(getRecordUrl);
        const cveRecordData = response?.data || {};
        this.isArecord = true;
        this.isIdOrRecordFound = false;

        // format description
        let descriptions = [];
        cveRecordData.containers?.cna?.descriptions.forEach((description) => {
          if (this.isEnglishLanguage(description.lang)) descriptions.push(this.processShowMoreShowLessDescription(description.value));
        });
        let recordDataSummary = {
          cveId: cveRecordData?.cveMetadata?.cveId || 'No ID provided',
          cna: cveRecordData?.cveMetadata?.assignerShortName || 'No CNA provided',
          descriptions: descriptions,
          relevancyScore: 'not appliciable'
        }
        this.recordData = recordDataSummary;

        if (cveRecordData?.cveMetadata.state === 'PUBLISHED') {
          this.isPublished = true;
        } else if (cveRecordData?.cveMetadata.state === 'REJECTED') {
          this.isRejected = true;
        }

      } catch (e) {
        this.isLookUpRecordServerError = true;

        this.isPublished = false;
        this.isReserved = false;
        this.isRejected = false;
        this.isIdOrRecordFound = false;
        this.isArecord = false;
        throw new Error('getRecordData >> throwing wrroe')
      } finally {
        this.isLookingUpRecord = false;
        this.decrement('totalExecutingRequests');
      }
    },
    async getSearchResults() {
      this.isQueryingSearchService = true;

      const instance = axios.create({
        baseURL: import.meta.env.VITE_API_BASE_URL,
      });

      try {
        let payLoad = this.createSearchPayload();
        const response = await instance.post(
          import.meta.env.VITE_LIST_SEARCH_PATH,
          payLoad
        );


        if (response.status === 200) {
          this.totalSearchResultCount = response.data.resultsTotal;
          this.processSearchResults(response.data.data);
        }

      } catch (e) {
        this.isSearchServerError = true;
        throw new Error(`getSearchResults >> : ${e}`)
      } finally {
        this.isQueryingSearchService = false;
        this.decrement('totalExecutingRequests');
      }
    },
    processSearchResults(results){
      const parsedResults = [];

      if (results.length >> 0) {
        results.forEach((result) => {

          parsedResults.push({
            cveId: result._id,
            cna: result?._source?.cveMetadata?.assignerShortName || 'No CNA provided',
            descriptions: this.processDescriptionsField(result),
            relevancyScore: result?._score
          });
        });
      }

      this.searchResults = parsedResults;
    },
    processDescriptionsField(result){
      let descriptions = [];
      if (result?._source?.cveMetadata?.state === "PUBLISHED") {
        result?._source?.containers?.cna?.descriptions.forEach((description) => {
          if (this.isEnglishLanguage(description.lang)) descriptions.push(this.processShowMoreShowLessDescription(description.value));
        });
      } else if (result?._source?.cveMetadata?.state === "REJECTED") {
        result?._source?.containers?.cna?.rejectedReasons.forEach((rejectedReason) => {
          if (this.isEnglishLanguage(rejectedReason.lang)) descriptions.push(this.processShowMoreShowLessDescription(rejectedReason.value));
        });
      } else {
        descriptions.push('No description provided');
      }

      return descriptions;
    },
    processShowMoreShowLessDescription(description){
      let words = this.splitDescriptionsIntoWords(description);
      let processedDescription = {
        firstChunk: words.splice(0, 30).join(' '),
        secondChunk: words.join(' '),
        showMore: false,
      };

      return processedDescription;
      // if 1st or 2nd arr empty then don't display
    },
    splitDescriptionsIntoWords(str) {
      const value = str.trim()
      if(!value) return 0;
      return value.split(/\s+/);
    },
    setUpInitialPagination() {
      if (Object.keys(this.pagination.currentPageWindow).length === 0 && this.totalSearchResultCount > 0) {
        // sets up these values for the first search request and the rest is handled in SearchResults component
        this.pagination.totalPages = Math.ceil(this.totalSearchResultCount / this.pagination.numberPerPage);
        if (this.pagination.totalPages < this.pagination.maxPageWindow) {
          this.pagination.endWindow = this.pagination.maxPageWindow = this.pagination.totalPages;
        } else {
          this.pagination.endWindow = this.pagination.maxPageWindow;
        }

        this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
        this.calcToAndFromCounts();
      }
    },
    async paginate() {
      try {
        this.calcToAndFromCounts();
      
        // search service starts at 0 while this app starts at 1
        this.from = (parseInt(this.pagination.currentPage) * parseInt(this.pagination.numberPerPage)) - parseInt(this.pagination.numberPerPage);
        if (parseInt(this.from) + parseInt(this.pagination.numberPerPage) > parseInt(this.totalSearchResultCount)) {
          this.size = parseInt(this.totalSearchResultCount) - parseInt(this.from);
        } else {
          this.size = parseInt(this.pagination.numberPerPage);
        }

        await this.search();
      } finally {
        this.router.push({
          name: 'SearchResults',
          query: {query: this.query},
          replace: true
        });
      }
    },
    calcRange(start, stop) {
      const startInt = parseInt(start);
      const stopInt = parseInt(stop);
      const step = 1;

      let newArr = Array.from({ length: (stopInt - startInt) / step + 1 }, (_, i) => startInt + i * step);
      return newArr
    },
    calcToAndFromCounts(){
      this.pagination.fromCount = (parseInt(this.pagination.currentPage) * parseInt(this.pagination.numberPerPage) - parseInt(this.pagination.numberPerPage)) + 1;
      if (this.totalSearchResultCount >= (this.pagination.numberPerPage * this.pagination.currentPage)){
        this.pagination.toCount = parseInt(this.pagination.currentPage) * parseInt(this.pagination.numberPerPage);
      } else if (this.pagination.fromCount === this.totalSearchResultCount) {
        this.pagination.toCount = undefined;
      } else {
        this.pagination.toCount = this.totalSearchResultCount;
      }
    },
    createSearchPayload() {
      let payLoad = {
        "query": this.query,
        "from": parseInt(this.from),
        "size": parseInt(this.size),
        "sort": {
          "property": this.pagination.sortBy.field,
          "order": this.pagination.sortBy.direction
        }
      }

      return payLoad;
    },
    getResults() {
      this.pagination.currentPage = 1;
      this.paginate();

      this.pagination.totalPages = Math.ceil(this.totalSearchResultCount / this.pagination.numberPerPage);
      if (this.pagination.totalPages < this.pagination.maxPageWindow) {
        this.pagination.endWindow = this.pagination.totalPages;
      } else {
        this.pagination.endWindow = this.pagination.maxPageWindow;
      }

      this.pagination.startWindow = 1;
      this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
      this.calcToAndFromCounts();
    },
    sortResults() {
      this.getResults();
    },
    handleNumberPerPageChange() {
      this.getResults();
    },
    handlePageChange(pageNum) {
      this.pagination.currentPage = pageNum;
      this.paginate();
    },
    handlePreviousWindowChange() {
      const maxPageWindow = parseInt(this.pagination.maxPageWindow);
      const isPartialWindow = (parseInt(this.pagination.endWindow) % maxPageWindow) > 0;
      this.pagination.currentPage = parseInt(this.pagination.currentPage) - maxPageWindow;
      this.pagination.startWindow = parseInt(this.pagination.startWindow) - maxPageWindow;
      this.pagination.endWindow = isPartialWindow ? (this.pagination.startWindow + (maxPageWindow - 1)) : this.pagination.endWindow - maxPageWindow;
      this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
      this.paginate();
    },
    handleNextWindowChange() {
      const maxPageWindow = parseInt(this.pagination.maxPageWindow);
      const totalPages = parseInt(this.pagination.totalPages);
      const endWindow = parseInt(this.pagination.endWindow);
      const isPartialWindow = (totalPages - (endWindow + maxPageWindow)) < 0;
      const currentPageExceedsMaxPage = (this.pagination.currentPage + maxPageWindow) > totalPages;
      const partialWindowSize =  totalPages % maxPageWindow;

      this.pagination.currentPage = isPartialWindow && currentPageExceedsMaxPage ? totalPages : this.pagination.currentPage + maxPageWindow;
      this.pagination.startWindow = parseInt(this.pagination.startWindow) + maxPageWindow;
      this.pagination.endWindow = isPartialWindow ? endWindow + partialWindowSize : endWindow + maxPageWindow;
      this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
      this.paginate();
    },
    handlePreviousPageChange() {
      this.pagination.currentPage = parseInt(this.pagination.currentPage) - 1;

      if (this.pagination.currentPage >= 1) {
        if (this.pagination.currentPage % this.pagination.maxPageWindow === 0) {
          this.pagination.endWindow = parseInt(this.pagination.currentPage);
          this.pagination.startWindow = parseInt(this.pagination.endWindow) - (parseInt(this.pagination.maxPageWindow) - 1);
        }

        this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
        this.paginate();
      } 
    },
    handleNextPageChange() {
      this.pagination.currentPage = parseInt(this.pagination.currentPage) + 1;
      if ((this.pagination.currentPage > this.pagination.endWindow) && (this.pagination.currentPage <= this.pagination.totalPages)) {
        this.pagination.startWindow = this.pagination.currentPage;

        if (this.pagination.startWindow === this.pagination.totalPages) {
          this.pagination.endWindow = this.pagination.startWindow;
        } else if ((this.pagination.endWindow + this.pagination.maxPageWindow) < this.pagination.totalPages) {
          this.pagination.endWindow = parseInt(this.pagination.endWindow) + this.pagination.maxPageWindow;
        } else if ((this.pagination.endWindow + this.pagination.maxPageWindow) > this.pagination.totalPages) {
          this.pagination.endWindow = parseInt(this.pagination.endWindow) + (this.pagination.totalPages - this.pagination.startWindow);
        }

        this.pagination.currentPageWindow = this.calcRange(this.pagination.startWindow, this.pagination.endWindow);
      }

      this.paginate();
    },
    handleShowMoreChange(resultIndex, descriptionIndex) {
      if (typeof resultIndex === 'number') {
        let description =  this.searchResults[resultIndex].descriptions[descriptionIndex];
        description.showMore = !description.showMore;
      } else {
        let description =  this.recordData.descriptions[descriptionIndex];
        description.showMore = !description.showMore;
      }
    },
    isEnglishLanguage(lang) {
      const regex = /^(en)/;
      const isEnglishLanguage = regex.test(lang);

      return isEnglishLanguage;
    },
  }
});