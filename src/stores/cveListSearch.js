import { defineStore } from 'pinia';
import axios from 'axios';

export const useCveListSearchStore = defineStore('cveListSearch ', {
  state: () => { 
    return {
      cveId: '',
      cveRecordIsLoading: false,
      from: 0,
      isArecord: undefined,
      isIdOrRecordFound: true,
      isPublished: false,
      isReserved: false,
      isRejected: false,
      isSearching: false,
      isRecordServerError: false,
      isSearchServerError: false,
      query: '',
      recordData: {},
      searchResults: [],
      searchResultIsLoading: false,
      serverError: false,
      showHelpText: false,
      size: 25,
      totalExecutingRequests: 0,
      totalSearchResultCount: 0,
    }
  },
  actions: {
    decrement(field) {
      this[field] -= 1;
    },
    async getSearchResults() { 
      useCveListSearchStore().searchResultIsLoading = true;
      const instance = axios.create({
        baseURL: import.meta.env.VITE_API_BASE_URL,
      });

      try {
        const response = await instance.post(
          import.meta.env.VITE_LIST_SEARCH_PATH,
          {
            "query": useCveListSearchStore().query,
            "from": this.from,
            "size": this.size
          }
        );
        
        console.log('Search service response:')
        console.log(response);

        if (response.status === 200) {
          useCveListSearchStore().totalSearchResultCount = response.data.resultsTotal;
          console.log('totalSearchResultCount: ', useCveListSearchStore().totalSearchResultCount)
          this.processSearchResults(response.data.data);
        }

      } catch (e) {
        useCveListSearchStore().isSearchServerError = true;
        console.log('Search service error:');
        console.log(e);
      } finally {
        useCveListSearchStore().searchResultIsLoading = false;
        useCveListSearchStore().decrement('totalExecutingRequests');
      }
    },
    processSearchResults(results){
      const parsedResults = [];

      if (results.length > 0) {
        results.forEach((result) => {
          const descriptions = [];
          console.log(result._id)

          if (result?._source?.cveMetadata?.state === "PUBLISHED") {
            result?._source?.containers?.cna?.descriptions.forEach((description) => {
              if (description.lang === "en") descriptions.push(description.value);
            });
          } else if (result?._source?.cveMetadata?.state === "REJECTED") {
            result?._source?.containers?.cna?.rejectedReasons.forEach((rejectedReason) => {
              if (rejectedReason.lang === "en") descriptions.push(rejectedReason.value);
            });
          } else {
            descriptions.push('No description provided');
          }

          parsedResults.push({
            cveId: result._id,
            cna: result?._source?.cveMetadata?.assignerShortName || 'No CNA provided',
            descriptions: descriptions,
            relevancyScore: result?._score
          });
        });
      }

      useCveListSearchStore().searchResults = parsedResults;
      if (Object.keys(useCveListSearchStore().recordData).length > 0) useCveListSearchStore().searchResults.unshift(useCveListSearchStore().recordData);
    },
  }
});