import { defineStore } from 'pinia';
import axios from 'axios';

export const useCveListSearchStore = defineStore('cveListSearch ', {
  state: () => { 
    return {
      cveId: '',
      cveRecordIsLoading: false,
      from: 0,
      isArecord: undefined,
      isIdOrRecordFound: true,
      isPublished: false,
      isReserved: false,
      isRejected: false,
      isSearching: false,
      isRecordServerError: false,
      isSearchServerError: false,
      query: '',
      recordData: {},
      searchResults: [],
      searchResultIsLoading: false,
      serverError: false,
      showHelpText: false,
      size: 25,
      totalExecutingRequests: 0,
      totalSearchResultCount: 0,
    }
  },
  actions: {
    decrement(field) {
      this[field] -= 1;
    },
    isCveIdPattern() {
      return new RegExp(/^CVE-\d{4}-\d{4,7}$/, 'i').test(useCveListSearchStore().query);
    },
    async getRecordData() {
      this.cveRecordIsLoading = true;
      const getRecordUrl = `/api/cve/${this.cveId}`;
      console.log('getRecordUrl: ', getRecordUrl);

      try {
        axios.defaults.baseURL = `https://${import.meta.env.VITE_CVE_SERVICES_BASE_URL}`;
        const response = await axios.get(getRecordUrl);
        const cveRecordData = response?.data || {};
        console.log('cveRecordData', response?.data || {})
        console.log('Got record data');
        console.log(response)
        this.isArecord = true;
        this.isIdOrRecordFound = false;

        // format description
        let descriptions = [];
        cveRecordData.containers?.cna?.descriptions.forEach((description) => {
          if (description.lang === "en") descriptions.push(description.value);
        });
        let recordDataSummary = {
          cveId: cveRecordData?.cveMetadata?.cveId || 'No ID provided',
          cna: cveRecordData?.cveMetadata?.assignerShortName || 'No CNA provided',
          descriptions: descriptions,
          relevancyScore: 'not appliciable'
        }
        this.recordData = recordDataSummary;
        console.log('this.recordData = recordDataSummary; ', recordDataSummary)

        if (cveRecordData?.cveMetadata.state === 'PUBLISHED') {
          this.isPublished = true;
        } else if (cveRecordData?.cveMetadata.state === 'REJECTED') {
          this.isRejected = true;
        }
      } catch (e) {
        console.log(`Error: couldn't get record data`);
        console.log(e)
        this.isRecordServerError = true;

        this.isPublished = false;
        this.isReserved = false;
        this.isRejected = false;
        this.isIdOrRecordFound = false;
        this.isArecord = false;
      } finally {
        this.cveRecordIsLoading = false;
        this.decrement('totalExecutingRequests');
      }
    },
    async getSearchResults() { 
      this.searchResultIsLoading = true;
      const instance = axios.create({
        baseURL: import.meta.env.VITE_API_BASE_URL,
      });

      try {
        const response = await instance.post(
          import.meta.env.VITE_LIST_SEARCH_PATH,
          {
            "query": this.query,
            "from": this.from,
            "size": this.size
          }
        );

        console.log('Search service response:')
        console.log(response);

        if (response.status === 200) {
          this.totalSearchResultCount = response.data.resultsTotal;
          console.log('totalSearchResultCount: ', this.totalSearchResultCount)
          this.processSearchResults(response.data.data);
        }

      } catch (e) {
        this.isSearchServerError = true;
        console.log('Search service error:');
        console.log(e);
      } finally {
        this.searchResultIsLoading = false;
        this.decrement('totalExecutingRequests');
      }
    },
    processSearchResults(results){
      const parsedResults = [];

      if (results.length > 0) {
        results.forEach((result) => {
          const descriptions = [];
          console.log(result._id)

          if (result?._source?.cveMetadata?.state === "PUBLISHED") {
            result?._source?.containers?.cna?.descriptions.forEach((description) => {
              if (description.lang === "en") descriptions.push(description.value);
            });
          } else if (result?._source?.cveMetadata?.state === "REJECTED") {
            result?._source?.containers?.cna?.rejectedReasons.forEach((rejectedReason) => {
              if (rejectedReason.lang === "en") descriptions.push(rejectedReason.value);
            });
          } else {
            descriptions.push('No description provided');
          }

          parsedResults.push({
            cveId: result._id,
            cna: result?._source?.cveMetadata?.assignerShortName || 'No CNA provided',
            descriptions: descriptions,
            relevancyScore: result?._score
          });
        });
      }

      this.searchResults = parsedResults;
      if (Object.keys(this.recordData).length > 0) this.searchResults.unshift(this.recordData);
    },
  }
});