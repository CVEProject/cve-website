import { defineStore } from 'pinia';
import _ from 'lodash';


export const useCveRecordLookupStore = defineStore('cveRecordLookup', {
  state: () => { 
    return {
      cveId: '',
      idData: {},
      isArecord: false,
      isIdOrRecordFound: false,
      isSearching: false,
      isRejected: false,
      isReserved: false,
      isPublished: false,
      recordData: {},
      serverError: false,
      showHelpText: false,
      showJsonRecord: false,
      hasAdpInfo: false,
      emptyProductStatus: {},
      accordianState: {
        collapseAll: true,
      },
      onPageMenuItems: {
        submenu: {}
      },
      orgIdAndLongNameMap: {},
      cveProgramShortName: 'cve'
    }
  },
  actions: {
    getReferences(references: Array<any>) {
      const value = references;
      const filteredReferences: Array<object> = [];

      if (this.hasData(value)) {
        const regex = /^x_refsource/;

        value.forEach((reference: {tags: Array<string>, hostname: string, name: string, url: string }) => {

          const filteredTags: Array<string> = [];

          if (reference?.tags) {
            reference.tags.forEach((tag: string) => {
              if (!regex.test(tag)) filteredTags.push(tag);
            });
          }
          const newReference: {tags: Array<string>, hostname: string, name: string, url: string } = _.cloneDeep(reference);
          newReference.tags = filteredTags;
          if (newReference?.name && newReference.name.length > 0) newReference.hostname = (new URL(newReference.url)).hostname.replace('www.', '');
          filteredReferences.push(newReference);
        });
      }

      return filteredReferences;
    },
    hasData(value: Array<object>) {
      if (typeof value !== 'undefined' && value.length > 0) {
        return true;
      }

      return false;
    },
  }
});
