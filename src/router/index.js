
  {
    path: '/',
    name: 'Home',
    component: Home,
    meta: {
      title: 'Home | CVE',
      metaTags: [
        {
          name: 'google-site-verification',
          content: 'CCHeQyhFnkXljGOxNEvI32d4sPgTNFvvEoXa4TAOoqs',
        },
      ],
    },
  },
  {
    path: '/CVERecord',
    name: 'CVERecord',
    component: CVERecord,
    meta: {
      title: 'CVE Record | CVE',
    },
  },
  {
    path: '/SiteSearch',
    name: 'SiteSearch',
    component: SiteSearch,
    meta: {
      title: 'Site Search | CVE',
    },
  },
  {
    path: '/Downloads',
    name: 'Downloads',
    component: Downloads,
    meta: {
      title: 'Downloads | CVE',
    },
  },
  {
    path: '/About/Overview',
    name: 'Overview',
    component: Overview,
    meta: {
      title: 'Overview | CVE',
    },
  },
  {
    path: '/About/History',
    name: 'History',
    component: History,
    meta: {
      title: 'History | CVE',
    },
  },
  {
    path: '/About/Process',
    name: 'Process',
    component: Process,
    meta: {
      title: 'Process | CVE',
    },
  },
  {
    path: '/About/RelatedEfforts',
    name: 'RelatedEfforts',
    component: RelatedEfforts,
    meta: {
      title: 'Related Efforts | CVE',
    },
  },
  {
    path: '/About/Metrics',
    name: 'Metrics',
    component: Metrics,
    meta: {
      title: 'Metrics | CVE',
    },
  },
  {
    path: '/PartnerInformation/Partner',
    name: 'Partner',
    component: Partner,
    meta: {
      title: 'Partner | CVE',
    },
  },
  {
    path: '/PartnerInformation/ListofPartners',
    name: 'ListofPartners',
    component: ListofPartners,
    meta: {
      title: 'List Of Partners | CVE',
    },
  },
  {
    path: '/PartnerInformation/ListofPartners/partner/:shortName',
    name: 'PartnerDetails',
    component: PartnerDetails,
    meta: {
      title: 'Partner Details | CVE',
    },
  },
  {
    path: '/ProgramOrganization/Structure',
    name: 'Structure',
    component: Structure,
    meta: {
      title: 'Structure | CVE',
    },
  },
  {
    path: '/ProgramOrganization/ProgramRelationshipwithPartners',
    name: 'ProgramRelationshipwithPartners',
    component: ProgramRelationshipwithPartners,
    meta: {
      title: 'Program Relationship With Partners | CVE',
    },
  },
  {
    path: '/ProgramOrganization/Board',
    name: 'Board',
    component: Board,
    meta: {
      title: 'Board | CVE',
    },
  },
  {
    path: '/ProgramOrganization/WorkingGroups',
    name: 'WorkingGroups',
    component: WorkingGroups,
    meta: {
      title: 'Working Groups | CVE',
    },
  },
  {
    path: '/ProgramOrganization/CNAs',
    name: 'CNAs',
    component: CNAs,
    meta: {
      title: 'CNAs | CVE',
    },
  },
  {
    path: '/ResourcesSupport/Resources',
    name: 'Resources',
    component: Resources,
    meta: {
      title: 'Resources | CVE',
    },
  },
  {
    path: '/ReportRequest/ReportRequestForNonCNAs',
    name: 'ReportRequestForNonCNAs',
    component: ReportRequestForNonCNAs,
    meta: {
      title: 'Report/Request For CNAs | CVE',
    },
  },
  {
    path: '/ReportRequest/ReserveIDsPublishRecordsForCNAs',
    name: 'ReserveIDsPublishRecordsForCNAs',
    component: ReserveIDsPublishRecordsForCNAs,
    meta: {
      title: 'Reserve IDs & Publish Records | CVE',
    },
  },
  {
    path: '/ResourcesSupport/Glossary',
    name: 'Glossary',
    component: Glossary,
    meta: {
      title: 'Glossary | CVE',
    },
  },
  {
    path: '/ResourcesSupport/FAQs',
    name: 'FAQs',
    component: FAQs,
    meta: {
      title: 'FAQs | CVE',
    },
  },
  {
    path: '/ResourcesSupport/AllResources/CNARules',
    name: 'CNARules',
    component: CNARules,
    meta: {
      title: 'CNA Rules | CVE',
    },
  },
  {
    path: '/ResourcesSupport/AllResources/ProfessionalCodeOfConduct',
    name: 'ProfessionalCodeOfConduct',
    component: ProfessionalCodeOfConduct,
    meta: {
      title: 'Professional Code of Conduct | CVE',
    },
  },
  {
    path: '/AllResources/CveServices',
    name: 'CveServices',
    component: CveServices,
    meta: {
      title: 'CVE Services | CVE',
    },
  },
  {
    path: '/Legal/PrivacyPolicy',
    name: 'PrivacyPolicy',
    component: PrivacyPolicy,
    meta: {
      title: 'Privacy Policy | CVE',
    },
  },
  {
    path: '/Legal/TermsOfUse',
    name: 'TermsOfUse',
    component: TermsOfUse,
    meta: {
      title: 'Terms Of Use | CVE',
    },
  },
  {
    path: '/Media/News/AllNews',
    name: 'AllNews',
    component: AllNews,
    meta: {
      title: 'All News | CVE',
    },
    alias: '/Media/News/AllNews',
  },
  {
    path: '/Media/News/News',
    name: 'News',
    component: News,
    meta: {
      title: 'News | CVE',
    },
    alias: '/Media/News/News',
  },
  {
    path: '/Media/News/Blogs',
    name: 'Blogs',
    component: Blogs,
    meta: {
      title: 'Blogs | CVE',
    },
    alias: '/Media/News/Blogs',
  },
  {
    path: '/Media/News/Podcasts',
    name: 'Podcasts',
    component: Podcasts,
    meta: {
      title: 'Podcasts | CVE',
    },
  },
  {
    path: '/Media/News/PressReleases',
    name: 'Press Releases',
    component: PressReleases,
    meta: {
      title: 'Press Releases | CVE',
    },
  },
  {
    path: '/Media/News/item/:newsType/:year/:month/:day/:shortTitle',
    name: 'NewsItem',
    component: NewsItem,
    meta: {
      title: 'NewsItem | CVE',
    },
  },
  {
    path: '/Media/News/NewsArchives',
    name: 'NewsArchives',
    component: NewsArchives,
    meta: {
      title: 'News Archives | CVE',
    },
  },
  {
    path: '/Media/News/BlogArchives',
    name: 'BlogArchives',
    component: BlogArchives,
    meta: {
      title: 'Blog Archives | CVE',
    },
  },
  {
    path: '/Media/News/PressReleaseArchives',
    name: 'PressReleaseArchives',
    component: PressReleaseArchives,
    meta: {
      title: 'Press Release Archives | CVE',
    },
  },
  {
    path: '/Media/Events',
    name: 'Events',
    component: Events,
    meta: {
      title: 'Events | CVE',
    },
  },
  {
    path: '/Media/News/NewsletterSignup',
    name: 'Newsletter Signup',
    component: NewsletterSignup,
    meta: {
      title: 'Newsletter Signup | CVE',
    },
  },
  {
    path: '*',
    name: 'NotFound',
    meta: {
      title: 'Not Found | CVE',
    },
  },
];

const router = new VueRouter({
  mode: 'history',
  scrollBehavior(to) {
    if (to.hash) {
      return {
        selector: to.hash,
        offset: { x: 0, y: 55 },
      };
    }
    return {
      x: 0,
      y: 0,
    };
  },
  routes,
});

// This callback runs before every route change, including on page load.
router.beforeEach((to, from, next) => {
  // This goes through the matched routes from last to first, finding the closest route with a title.
  // e.g., if we have `/some/deep/nested/route` and `/some`, `/deep`, and `/nested` have titles,
  // `/nested`'s will be chosen.
  const nearestWithTitle = to.matched.slice().reverse().find((r) => r.meta && r.meta.title);

  // Find the nearest route element with meta tags.
  const nearestWithMeta = to.matched.slice().reverse().find((r) => r.meta && r.meta.metaTags);

  // If a route with a title was found, set the document (page) title to that value.
  if (nearestWithTitle) document.title = nearestWithTitle.meta.title;

  // Remove any stale meta tags from the document using the key attribute we set below.
  Array.from(document.querySelectorAll('[data-vue-router-controlled]'), (el) => el.parentNode.removeChild(el));

  // Skip rendering meta tags if there are none.
  if (!nearestWithMeta) return next();

  // Turn the meta tag definitions into actual elements in the head.
  nearestWithMeta.meta.metaTags.map((tagDef) => {
    const tag = document.createElement('meta');

    Object.keys(tagDef).forEach((key) => {
      tag.setAttribute(key, tagDef[key]);
    });

    // We use this to track which meta tags we create so we don't interfere with other ones.
    tag.setAttribute('data-vue-router-controlled', '');

    return tag;
  })
  // Add the meta tags to the document head.
    .forEach((tag) => document.head.appendChild(tag));

  return next();
});

export default router;
