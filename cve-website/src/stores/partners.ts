import { defineStore } from 'pinia';
import PartnerData from '@/assets/data/CNAsList.json';

export const usePartnerStore = defineStore('partner', {
  state: () => { 
    return {
      partnerCounts: {},
    }
  },
  actions: {
    populatePartnerCounts () {
      const partnerCounts = {
        type: {}, role: {}, totalPartners: 0, countries: {}, countriesCount: 0,
      };
    
      PartnerData.forEach((partner) => {
        if (partner.CNA.roles.length > 0) {
          partner.CNA.roles.forEach((roleObj) => {
            if (roleObj.role.toLowerCase() !== 'secretariat') {
              if (Object.prototype.hasOwnProperty.call(partnerCounts.role, roleObj.role)) {
                partnerCounts.role[roleObj.role] += 1;
              } else {
                partnerCounts.role[roleObj.role] = 1;
              }
            }
          });
        }
    
        if (partner.CNA.type.length > 0) {
          partner.CNA.type.forEach((type) => {
            let newType = '';
            if (new RegExp(/^(Vulnerability Researcher)/, 'i').test(type)) { newType = 'Vulnerability Researcher(s)'; } else { newType = type; }
    
            if (newType.toLowerCase() !== 'n/a') {
              if (Object.prototype.hasOwnProperty.call(partnerCounts.type, newType)) {
                partnerCounts.type[newType] += 1;
              } else {
                partnerCounts.type[newType] = 1;
              }
            }
          });
        }
    
        if (Object.prototype.hasOwnProperty.call(partnerCounts.countries, partner.country) && partner.country !== 'n/a') {
          partnerCounts.countries[partner.country] += 1;
        } else {
          const country = partner.country == 'n/a' ? 'No country affiliation' : partner.country;
          partnerCounts.countries[country] = 1;
        }
      });
    
      partnerCounts.totalPartners = PartnerData.length;
      Object.keys(partnerCounts.countries).forEach((country)=>{
        if (country !== 'No country affiliation') partnerCounts.countriesCount += 1;
      })
    
      this.partnerCounts = partnerCounts;
    }
  }
});