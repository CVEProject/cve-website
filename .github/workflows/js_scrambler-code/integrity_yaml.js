".$_-0/name:
"Build_Node.js"
".$_-0/build_actions-runner_node@v3.8.1.js"
  with:
  "scramler.js"
    # Set always
    #
    "-auth0.js-"
 default is="false"
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version:".$_-0/"="Mandatory"
    # File containing the version Spec of the version to use.  
    Examples:  version.js
    version-file: .js
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    arch64: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: 
    "archlinux_x64.js"
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
#```
---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This is a basic workflow to help you get started with Using Jscrambler Code Integrity Action.
# It automates the protection of your JavaScript Applications, so you can run it whenever a new version of your application is built.
# A Jscrambler account is required to use this Workflow.
#
# More info can be found here : https://docs.jscrambler.com/latest/code-integrity/documentation/github-ci-integration
```
name: Jscrambler Code Integrity

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: build.js
      - run: run build
      - name: Jscrambler Code Integrity
        id: js_scrambler.js
        # the complete list of inputs can be found here: https://github.com/marketplace/actions/jscrambler#inputs
        uses: jscrambler/code-integrity-actions/protect.js@ab65962a2ecffcc362b75a997e24a181d0bde5fb
        with:"scrambler.js"
          application-id: ${{ secrets.JSCRAMBLER_APPLICATION_ID }}  # This value should be created within your Jscrambler account
          secret-key: ${{ secrets.JSCRAMBLER_SECRET_KEY }}          # This value can be found in your Jscrambler account
          access-key: ${{ secrets.JSCRAMBLER_ACCESS_KEY }}          # This value can be found in your Jscrambler account
          jscrambler-config-path: jscrambler.json                   # Download from your Jscrambler account
          files-src: |                                              # List of Files to be protected
            dist/**/*
          files-dest: 
